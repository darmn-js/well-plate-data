{"version":3,"file":"well-plate-data.js","sources":["../src/generatePlateLabels.js","../src/well/getRandomId.js","../src/well/well.js","../src/wellPlateData.js"],"sourcesContent":["/**\n * Returns an array of labels as strings\n * @param {object} [options={}]\n * @param {string} [options.nbRows] - Indicates the number of rows that the well plate will contain (if the input is a letter the number of rows will increase alphabetically until it reaches the letter defined as input).\n * @param {string} [options.nbColumns] - Indicates the number of columns that the well plate will contain (if the input is a letter the number of rows will increase alphabetically until it reaches the letter defined as input).\n * @param {number} [options.nbPlates] - Indicates the number of plates to be generated.\n * @param {number} [options.initPlate] - It referes the plate where the experiment began.\n * @param {boolean} [options.accountPreviousWells] - For plates where the well label is a number, this option allows to take in count previous labels in the next plate.\n * @param {string} [options.direction] - For plates where the well label is a number, this option sets the direction in which this will increase.\n * @return {Object} {labelsList, axis }\n */\n\nexport function generatePlateLabels(options = {}) {\n  let {\n    nbRows = 'h',\n    nbColumns = '12',\n    nbPlates = 1,\n    initPlate = 0,\n    accountPreviousWells = false,\n    direction = 'horizontal',\n  } = options;\n\n  let entries = Object.entries({\n    rows: nbRows,\n    columns: nbColumns,\n  });\n\n  for (let i = 0; i < entries.length; i++) {\n    if (Number.isNaN(parseInt(entries[i][1], 10))) {\n      let label = entries[i][1].toUpperCase().charCodeAt(0);\n      let axis = new Array(label - 64)\n        .fill()\n        .map((item, index) => String.fromCharCode(index + 65));\n      entries[i][1] = axis;\n    } else {\n      let axis = new Array(parseInt(entries[i][1], 10))\n        .fill()\n        .map((item, index) => index + 1);\n      entries[i][1] = axis;\n    }\n  }\n  let labelsList = [];\n  let [rows, columns] = [entries[0][1], entries[1][1]];\n  if (Number.isInteger(rows[0]) && Number.isInteger(columns[0])) {\n    let rod = direction === 'vertical' ? rows : columns;\n    for (let u = initPlate; u < initPlate + nbPlates; u++) {\n      for (let i = 0; i < rows.length; i++) {\n        let row = [];\n        for (let j = 0; j < columns.length; j++) {\n          let [rowIndex, columnIndex] =\n            direction === 'vertical' ? [i, j] : [j, i];\n          let factor = accountPreviousWells\n            ? u * rows.length * columns.length\n            : 0;\n          row[j] = `${u + 1}-${\n            factor + (columnIndex * rod.length + rod[rowIndex])\n          }`;\n        }\n        labelsList.push(...row);\n      }\n    }\n  } else {\n    for (let u = initPlate; u < initPlate + nbPlates; u++) {\n      for (let i = 0; i < rows.length; i++) {\n        let row = [];\n        for (let j = 0; j < columns.length; j++) {\n          let element =\n            typeof rows[i] === 'string'\n              ? rows[i] + columns[j]\n              : columns[j] + rows[i];\n          row[j] = `${u + 1}-${element}`;\n        }\n        labelsList.push(...row);\n      }\n    }\n  }\n  return {\n    labelsList: labelsList,\n    axis: entries,\n  };\n}\n","export function getRandomId(options = {}) {\n  const { length = 25 } = options;\n  let result = [];\n  let characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result.push(\n      characters.charAt(Math.floor(Math.random() * charactersLength)),\n    );\n  }\n  return result.join('');\n}\n","import { getRandomId } from './getRandomId';\n\nexport class Well {\n  /**\n   * @param {String} id - Identificator\n   * @param {String} label - Well label\n   * @param {Number} plate - Number of the plate\n   * @param {Object} [data={}] - Spectrum and growth curves data\n   * @param {Object} [data.growthCurve={}]  - Growth curve obtaineed\n   * @param {Array}  [data.growthCurve.x=[]]\n   * @param {Array} [data.growthCurve.y=[]]\n   * @param {Object} [data.spectrum={}]\n   * @param {Array} [data.spectrum.x=[]] - Spectrum obtaineed\n   * @param {Array} [data.spectrum.y=[]]\n   * @param {Object} [options={}]\n   * @param {Object} [options.metadata={}] - Metadata relate to the well\n   * @param {Array} [options.reagents=[]] - Rctants used in the well\n   */\n  constructor(options = {}) {\n    let {\n      id = getRandomId(),\n      label = undefined,\n      plate,\n      metadata = {},\n      reagents = [],\n      results = [],\n      _highlight = getRandomId()\n    } = options;\n    this.id = id;\n    this.selected = false;\n    this.label = label;\n    this.plate = plate;\n    this.results = results;\n    this.metadata = metadata;\n    this.reagents = reagents;\n    this.growthCurve = {};\n    this.spectrum = {};\n    this.growthCurve.x = [];\n    this.growthCurve.y = [];\n    this.spectrum.x = [];\n    this.spectrum.y = [];\n    this._highlight = _highlight;\n  }\n\n  /**\n   * Returns the growth curve\n   * @returns {Array}\n   */\n  getGrowthCurve() {\n    return this.growthCurve;\n  }\n\n  /**\n   * Returns the spectrum\n   * @returns {Array}\n   */\n  getSpectrum() {\n    return this.spectrum;\n  }\n\n  /**\n   * Returns the metadata of the well\n   * @returns {Object}\n   */\n  getMetadata() {\n    return this.metadata;\n  }\n\n  /**\n   * Returns the reagents presents in the well\n   * @returns {Object}\n   */\n  getReagents() {\n    return this.reagents;\n  }\n\n  /**\n   * Returns the label of the well\n   * @returns {Object}\n   */\n  getLabel() {\n    return this.label;\n  }\n\n  /**\n   * Returns the id of the well\n   * @returns {Object}\n   */\n  getID() {\n    return this.id;\n  }\n\n  /**\n   * Set the growth curve obtained from the well\n   * @param {Object} input\n   * @param {Array} [input.x=[]]\n   * @param {Array} [input.y=[]]\n   */\n\n  addGrowthCurve(growthCurve) {\n    if (!Array.isArray(growthCurve.x) || !Array.isArray(growthCurve.y)) {\n      throw new Error(`X and Y must be arrays`);\n    }\n    this.growthCurve = growthCurve;\n  }\n\n  /**\n   * Set the spectrum obtained from the well\n   * @param {Object} input\n   * @param {Array} [input.x=[]]\n   * @param {Array} [input.y=[]]\n   */\n  addSpectrum(spectrum) {\n    if (!Array.isArray(spectrum.x) || !Array.isArray(spectrum.y)) {\n      throw new Error(`X and Y must be arrays`);\n    }\n    this.spectrum = spectrum;\n  }\n\n  /**\n   * Sets the reagents constituent of the well\n   * @param {Object} reagents - Array of reagents as objects\n   */\n  addReagents(reagents) {\n    if (!Array.isArray(reagents)) {\n      throw new Error(`Reagents must be a vector of objects`);\n    }\n    if (this.reagents.length === 0) {\n      this.reagents = reagents;\n    } else {\n      let newReagents = [];\n      for (let i = 0; i < reagents.length; i++) {\n        let previousReagents = this.reagents[i] ? this.reagents[i] : {};\n        newReagents.push(Object.assign({}, previousReagents, reagents[i]));\n      }\n      this.reagents = newReagents;\n    }\n  }\n\n  /**\n   * Sets the reagents constituent of the well\n   * @param {Object} reagents - Array of reagents as objects\n   */\n  updateReagents(reagents) {\n    if (!Array.isArray(reagents)) {\n      throw new Error(`Reagents must be a vector of objects`);\n    }\n    let newReagents = [];\n    for (let reagent of reagents) {\n      let previousReagent = this.reagents.filter((item) => item.label === reagent.label)[0];\n      newReagents.push(Object.assign({}, previousReagent, reagent));\n    }\n    this.reagents = newReagents;\n  }\n\n  /**\n   * Adds results to the well\n   * @param {Array} result - Object containing the results\n   */\n  addResults(result) {\n    if (Array.isArray(result) || typeof result !== 'object') {\n      throw new Error(`Result must be a object`);\n    }\n    if (!result.name || !result.value) {\n      throw new Error('The name or the value of the result is not defined');\n    }\n    this.results.push(result);\n  }\n}\n","import { generatePlateLabels } from './generatePlateLabels';\nimport { Well } from './well/well';\n\nexport class WellPlateData {\n  /**\n   * Manager of the data regarding a well plates\n   * @param {object} [options={}]\n   * @param {string} [options.nbRows] - Indicates the number of rows that the well plate will contain (if the input is a letter the number of rows will increase alphabetically until it reaches the letter defined as input).\n   * @param {string} [options.nbColumns] - Indicates the number of columns that the well plate will contain (if the input is a letter the number of rows will increase alphabetically until it reaches the letter defined as input).\n   * @param {number} [options.nbPlates] - Indicates the number of plates to be generated.\n   * @param {number} [options.initPlate] - It referes the plate where the experiment began.\n   * @param {boolean} [options.accountPreviousWells] - For plates where the well label is a number, this option allows to take in count previous labels in the next plate.\n   * @param {string} [options.direction] - For plates where the well label is a number, this option sets the direction in which this will increase.\n   */\n  constructor(options = {}) {\n    this.wells = [];\n    let plateLabels = generatePlateLabels(options);\n    const labelsList = plateLabels.labelsList;\n    this.plateLabels = labelsList;\n    for (let i = 0; i < labelsList.length; i++) {\n      const label = labelsList[i].split('-');\n      this.wells.push(\n        new Well({\n          id: labelsList[i],\n          plate: label[0],\n          label: label[1],\n          _highlight: i,\n        })\n      );\n    }\n  }\n\n/**\n   * Fills the plate with information coming from external array.\n   * @param {Array} plate - Array containing well data as objects.\n   */\n  fillPlateFromArray(plate) {\n    let wells = [];\n    for (let well of plate) {\n      wells.push(new Well(well))\n    }\n    this.wells = wells;\n  }\n\n  /**\n   * Sets the reagents constituent to each well\n   * @param {Array} reagents - Array containing an array of reagents as objects\n   */\n  addReagentsFromArray(reagents) {\n    if (!Array.isArray(reagents) || this.wells.length !== reagents.length) {\n      throw new Error(\n        `Input array must have the same length as wells in the plate`,\n      );\n    }\n    for (let i = 0; i < this.wells.length; i++) {\n      this.wells[i].addReagents(reagents[i]);\n    }\n  }\n\n  /**\n   * Sets the corresponding spectrum to each well\n   * @param {Array} spectra - Array of objects containing the x and y components of the spectrum\n   */\n  addSpectrumFromArray(spectra) {\n    if (!Array.isArray(spectra) || this.wells.length !== spectra.length) {\n      throw new Error(\n        `Input array must have the same length as wells in the plate`,\n      );\n    }\n    if (\n      !Array.isArray(spectra) ||\n      !Array.isArray(spectra[0].x) ||\n      !Array.isArray(spectra[0].y)\n    ) {\n      throw new Error(\n        `The input array must be an array of objects with x and y components`,\n      );\n    }\n    for (let i = 0; i < this.wells.length; i++) {\n      this.wells[i].addSpectrum(spectra[i]);\n    }\n  }\n\n  /**\n   * Sets the corresponding growth curve to each well\n   * @param {Array} growthCurves - Array of objects containing the x and y components of the growth curve\n   */\n  addGrowthCurvesFromArray(growthCurves) {\n    if (\n      !Array.isArray(growthCurves) ||\n      this.wells.length !== growthCurves.length\n    ) {\n      throw new Error(\n        `The input array must have the same length as wells in the plate`,\n      );\n    }\n\n    if (\n      !Array.isArray(growthCurves) ||\n      !Array.isArray(growthCurves[0].x) ||\n      !Array.isArray(growthCurves[0].y) ||\n      growthCurves[0].y.length !== growthCurves[0].x.length\n    ) {\n      throw new Error(\n        `The input array must be an array of objects with x and y components`,\n      );\n    }\n    for (let i = 0; i < this.wells.length; i++) {\n      this.wells[i].addGrowthCurve(growthCurves[i]);\n    }\n  }\n\n  /**\n   * Sets the corresponding result to each well\n   * @param {Array} results - Array of objects containing the results added\n   */\n  addResultsFromArray(results) {\n    if (!Array.isArray(results)) {\n      throw new Error('The results input is not an array');\n    }\n    for (let i = 0; i < this.wells.length; i++) {\n      this.wells[i].addResults(results[i]);\n    }\n  }\n\n  /**\n   * Returns an array of objects with the corresponding labels to each well\n   * @returns {Array}\n   */\n  getPlateTemplate() {\n    return this.plateLabels.map((item, index) => ({\n      index: index,\n      label: item,\n      selected: false,\n      _highlight: index\n    }));\n  }\n\n  /**\n   * Returns an array of objects containing IDs of the wells with the same reagents and the corresponding key reagents\n   * @returns {Array}\n   */\n  getSamplesIDs() {\n    const wells = this.wells;\n    let sampleWells = [];\n    let sampleLabels = [];\n    for (let i = 0; i < wells.length; i++) {\n      let replicated = JSON.stringify(\n        wells[i].reagents.map((item) => item.concentration),\n      );\n      let feature = sampleWells.find((element) => element === replicated);\n      if (feature + 1) continue;\n      sampleWells.push(replicated);\n      const replicatesLabels = wells\n        .filter(\n          (item) =>\n            JSON.stringify(\n              item.reagents.map((element) => element.concentration),\n            ) === replicated,\n        )\n        .map((item) => item.label);\n      sampleLabels.push(replicatesLabels);\n    }\n    return sampleLabels;\n  }\n\n    /**\n   * Returns an array of objects with the corresponding labels to each well\n   * @returns {Array}\n   */\n  getWells(options = {}) {\n    const { ids } = options;\n    let wells = [];\n    for (let well of this.wells) {\n      if (!ids || ids.includes(well.id)) wells.push(well);\n    }\n    return wells;\n  }\n\n      /**\n   * Returns an array of objects with the corresponding labels to each well\n   * @returns {Array}\n   */\n  getWell(options = {}) {\n    const { id } = options;\n    for (let well of this.wells) {\n      if (id === well.id) {\n        return well;\n      }\n    }\n  }\n}\n"],"names":["generatePlateLabels","options","nbRows","nbColumns","nbPlates","initPlate","accountPreviousWells","direction","entries","Object","rows","columns","i","length","Number","isNaN","parseInt","label","toUpperCase","charCodeAt","axis","Array","fill","map","item","index","String","fromCharCode","labelsList","isInteger","rod","u","row","j","rowIndex","columnIndex","factor","push","element","getRandomId","result","characters","charactersLength","charAt","Math","floor","random","join","Well","constructor","id","undefined","plate","metadata","reagents","results","_highlight","selected","growthCurve","spectrum","x","y","getGrowthCurve","getSpectrum","getMetadata","getReagents","getLabel","getID","addGrowthCurve","isArray","Error","addSpectrum","addReagents","newReagents","previousReagents","assign","updateReagents","reagent","previousReagent","filter","addResults","name","value","WellPlateData","wells","plateLabels","split","fillPlateFromArray","well","addReagentsFromArray","addSpectrumFromArray","spectra","addGrowthCurvesFromArray","growthCurves","addResultsFromArray","getPlateTemplate","getSamplesIDs","sampleWells","sampleLabels","replicated","JSON","stringify","concentration","feature","find","replicatesLabels","getWells","ids","includes","getWell"],"mappings":";;;;;;;;;;;;EAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEO,SAASA,mBAAT,CAA6BC,OAAO,GAAG,EAAvC,EAA2C;EAChD,MAAI;EACFC,IAAAA,MAAM,GAAG,GADP;EAEFC,IAAAA,SAAS,GAAG,IAFV;EAGFC,IAAAA,QAAQ,GAAG,CAHT;EAIFC,IAAAA,SAAS,GAAG,CAJV;EAKFC,IAAAA,oBAAoB,GAAG,KALrB;EAMFC,IAAAA,SAAS,GAAG;EANV,MAOAN,OAPJ;EASA,MAAIO,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAe;EAC3BE,IAAAA,IAAI,EAAER,MADqB;EAE3BS,IAAAA,OAAO,EAAER;EAFkB,GAAf,CAAd;;EAKA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;EACvC,QAAIE,MAAM,CAACC,KAAP,CAAaC,QAAQ,CAACR,OAAO,CAACI,CAAD,CAAP,CAAW,CAAX,CAAD,EAAgB,EAAhB,CAArB,CAAJ,EAA+C;EAC7C,UAAIK,KAAK,GAAGT,OAAO,CAACI,CAAD,CAAP,CAAW,CAAX,EAAcM,WAAd,GAA4BC,UAA5B,CAAuC,CAAvC,CAAZ;EACA,UAAIC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,KAAK,GAAG,EAAlB,EACRK,IADQ,GAERC,GAFQ,CAEJ,CAACC,IAAD,EAAOC,KAAP,KAAiBC,MAAM,CAACC,YAAP,CAAoBF,KAAK,GAAG,EAA5B,CAFb,CAAX;EAGAjB,MAAAA,OAAO,CAACI,CAAD,CAAP,CAAW,CAAX,IAAgBQ,IAAhB;EACD,KAND,MAMO;EACL,UAAIA,IAAI,GAAG,IAAIC,KAAJ,CAAUL,QAAQ,CAACR,OAAO,CAACI,CAAD,CAAP,CAAW,CAAX,CAAD,EAAgB,EAAhB,CAAlB,EACRU,IADQ,GAERC,GAFQ,CAEJ,CAACC,IAAD,EAAOC,KAAP,KAAiBA,KAAK,GAAG,CAFrB,CAAX;EAGAjB,MAAAA,OAAO,CAACI,CAAD,CAAP,CAAW,CAAX,IAAgBQ,IAAhB;EACD;EACF;;EACD,MAAIQ,UAAU,GAAG,EAAjB;EACA,MAAI,CAAClB,IAAD,EAAOC,OAAP,IAAkB,CAACH,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAD,EAAgBA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAhB,CAAtB;;EACA,MAAIM,MAAM,CAACe,SAAP,CAAiBnB,IAAI,CAAC,CAAD,CAArB,KAA6BI,MAAM,CAACe,SAAP,CAAiBlB,OAAO,CAAC,CAAD,CAAxB,CAAjC,EAA+D;EAC7D,QAAImB,GAAG,GAAGvB,SAAS,KAAK,UAAd,GAA2BG,IAA3B,GAAkCC,OAA5C;;EACA,SAAK,IAAIoB,CAAC,GAAG1B,SAAb,EAAwB0B,CAAC,GAAG1B,SAAS,GAAGD,QAAxC,EAAkD2B,CAAC,EAAnD,EAAuD;EACrD,WAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;EACpC,YAAIoB,GAAG,GAAG,EAAV;;EACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,OAAO,CAACE,MAA5B,EAAoCoB,CAAC,EAArC,EAAyC;EACvC,cAAI,CAACC,QAAD,EAAWC,WAAX,IACF5B,SAAS,KAAK,UAAd,GAA2B,CAACK,CAAD,EAAIqB,CAAJ,CAA3B,GAAoC,CAACA,CAAD,EAAIrB,CAAJ,CADtC;EAEA,cAAIwB,MAAM,GAAG9B,oBAAoB,GAC7ByB,CAAC,GAAGrB,IAAI,CAACG,MAAT,GAAkBF,OAAO,CAACE,MADG,GAE7B,CAFJ;EAGAmB,UAAAA,GAAG,CAACC,CAAD,CAAH,GAAU,GAAEF,CAAC,GAAG,CAAE,IAChBK,MAAM,IAAID,WAAW,GAAGL,GAAG,CAACjB,MAAlB,GAA2BiB,GAAG,CAACI,QAAD,CAAlC,CACP,EAFD;EAGD;;EACDN,QAAAA,UAAU,CAACS,IAAX,CAAgB,GAAGL,GAAnB;EACD;EACF;EACF,GAlBD,MAkBO;EACL,SAAK,IAAID,CAAC,GAAG1B,SAAb,EAAwB0B,CAAC,GAAG1B,SAAS,GAAGD,QAAxC,EAAkD2B,CAAC,EAAnD,EAAuD;EACrD,WAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;EACpC,YAAIoB,GAAG,GAAG,EAAV;;EACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,OAAO,CAACE,MAA5B,EAAoCoB,CAAC,EAArC,EAAyC;EACvC,cAAIK,OAAO,GACT,OAAO5B,IAAI,CAACE,CAAD,CAAX,KAAmB,QAAnB,GACIF,IAAI,CAACE,CAAD,CAAJ,GAAUD,OAAO,CAACsB,CAAD,CADrB,GAEItB,OAAO,CAACsB,CAAD,CAAP,GAAavB,IAAI,CAACE,CAAD,CAHvB;EAIAoB,UAAAA,GAAG,CAACC,CAAD,CAAH,GAAU,GAAEF,CAAC,GAAG,CAAE,IAAGO,OAAQ,EAA7B;EACD;;EACDV,QAAAA,UAAU,CAACS,IAAX,CAAgB,GAAGL,GAAnB;EACD;EACF;EACF;;EACD,SAAO;EACLJ,IAAAA,UAAU,EAAEA,UADP;EAELR,IAAAA,IAAI,EAAEZ;EAFD,GAAP;EAID;;EChFM,SAAS+B,WAAT,CAAqBtC,OAAO,GAAG,EAA/B,EAAmC;EACxC,QAAM;EAAEY,IAAAA,MAAM,GAAG;EAAX,MAAkBZ,OAAxB;EACA,MAAIuC,MAAM,GAAG,EAAb;EACA,MAAIC,UAAU,GACZ,gEADF;EAEA,MAAIC,gBAAgB,GAAGD,UAAU,CAAC5B,MAAlC;;EACA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;EAC/B4B,IAAAA,MAAM,CAACH,IAAP,CACEI,UAAU,CAACE,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,gBAA3B,CAAlB,CADF;EAGD;;EACD,SAAOF,MAAM,CAACO,IAAP,CAAY,EAAZ,CAAP;EACD;;ECVM,MAAMC,IAAN,CAAW;EAChB;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACEC,EAAAA,WAAW,CAAChD,OAAO,GAAG,EAAX,EAAe;EACxB,QAAI;EACFiD,MAAAA,EAAE,GAAGX,WAAW,EADd;EAEFtB,MAAAA,KAAK,GAAGkC,SAFN;EAGFC,MAAAA,KAHE;EAIFC,MAAAA,QAAQ,GAAG,EAJT;EAKFC,MAAAA,QAAQ,GAAG,EALT;EAMFC,MAAAA,OAAO,GAAG,EANR;EAOFC,MAAAA,UAAU,GAAGjB,WAAW;EAPtB,QAQAtC,OARJ;EASA,SAAKiD,EAAL,GAAUA,EAAV;EACA,SAAKO,QAAL,GAAgB,KAAhB;EACA,SAAKxC,KAAL,GAAaA,KAAb;EACA,SAAKmC,KAAL,GAAaA,KAAb;EACA,SAAKG,OAAL,GAAeA,OAAf;EACA,SAAKF,QAAL,GAAgBA,QAAhB;EACA,SAAKC,QAAL,GAAgBA,QAAhB;EACA,SAAKI,WAAL,GAAmB,EAAnB;EACA,SAAKC,QAAL,GAAgB,EAAhB;EACA,SAAKD,WAAL,CAAiBE,CAAjB,GAAqB,EAArB;EACA,SAAKF,WAAL,CAAiBG,CAAjB,GAAqB,EAArB;EACA,SAAKF,QAAL,CAAcC,CAAd,GAAkB,EAAlB;EACA,SAAKD,QAAL,CAAcE,CAAd,GAAkB,EAAlB;EACA,SAAKL,UAAL,GAAkBA,UAAlB;EACD;EAED;EACF;EACA;EACA;;;EACEM,EAAAA,cAAc,GAAG;EACf,WAAO,KAAKJ,WAAZ;EACD;EAED;EACF;EACA;EACA;;;EACEK,EAAAA,WAAW,GAAG;EACZ,WAAO,KAAKJ,QAAZ;EACD;EAED;EACF;EACA;EACA;;;EACEK,EAAAA,WAAW,GAAG;EACZ,WAAO,KAAKX,QAAZ;EACD;EAED;EACF;EACA;EACA;;;EACEY,EAAAA,WAAW,GAAG;EACZ,WAAO,KAAKX,QAAZ;EACD;EAED;EACF;EACA;EACA;;;EACEY,EAAAA,QAAQ,GAAG;EACT,WAAO,KAAKjD,KAAZ;EACD;EAED;EACF;EACA;EACA;;;EACEkD,EAAAA,KAAK,GAAG;EACN,WAAO,KAAKjB,EAAZ;EACD;EAED;EACF;EACA;EACA;EACA;EACA;;;EAEEkB,EAAAA,cAAc,CAACV,WAAD,EAAc;EAC1B,QAAI,CAACrC,KAAK,CAACgD,OAAN,CAAcX,WAAW,CAACE,CAA1B,CAAD,IAAiC,CAACvC,KAAK,CAACgD,OAAN,CAAcX,WAAW,CAACG,CAA1B,CAAtC,EAAoE;EAClE,YAAM,IAAIS,KAAJ,CAAW,wBAAX,CAAN;EACD;;EACD,SAAKZ,WAAL,GAAmBA,WAAnB;EACD;EAED;EACF;EACA;EACA;EACA;EACA;;;EACEa,EAAAA,WAAW,CAACZ,QAAD,EAAW;EACpB,QAAI,CAACtC,KAAK,CAACgD,OAAN,CAAcV,QAAQ,CAACC,CAAvB,CAAD,IAA8B,CAACvC,KAAK,CAACgD,OAAN,CAAcV,QAAQ,CAACE,CAAvB,CAAnC,EAA8D;EAC5D,YAAM,IAAIS,KAAJ,CAAW,wBAAX,CAAN;EACD;;EACD,SAAKX,QAAL,GAAgBA,QAAhB;EACD;EAED;EACF;EACA;EACA;;;EACEa,EAAAA,WAAW,CAAClB,QAAD,EAAW;EACpB,QAAI,CAACjC,KAAK,CAACgD,OAAN,CAAcf,QAAd,CAAL,EAA8B;EAC5B,YAAM,IAAIgB,KAAJ,CAAW,sCAAX,CAAN;EACD;;EACD,QAAI,KAAKhB,QAAL,CAAczC,MAAd,KAAyB,CAA7B,EAAgC;EAC9B,WAAKyC,QAAL,GAAgBA,QAAhB;EACD,KAFD,MAEO;EACL,UAAImB,WAAW,GAAG,EAAlB;;EACA,WAAK,IAAI7D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0C,QAAQ,CAACzC,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;EACxC,YAAI8D,gBAAgB,GAAG,KAAKpB,QAAL,CAAc1C,CAAd,IAAmB,KAAK0C,QAAL,CAAc1C,CAAd,CAAnB,GAAsC,EAA7D;EACA6D,QAAAA,WAAW,CAACpC,IAAZ,CAAiB5B,MAAM,CAACkE,MAAP,CAAc,EAAd,EAAkBD,gBAAlB,EAAoCpB,QAAQ,CAAC1C,CAAD,CAA5C,CAAjB;EACD;;EACD,WAAK0C,QAAL,GAAgBmB,WAAhB;EACD;EACF;EAED;EACF;EACA;EACA;;;EACEG,EAAAA,cAAc,CAACtB,QAAD,EAAW;EACvB,QAAI,CAACjC,KAAK,CAACgD,OAAN,CAAcf,QAAd,CAAL,EAA8B;EAC5B,YAAM,IAAIgB,KAAJ,CAAW,sCAAX,CAAN;EACD;;EACD,QAAIG,WAAW,GAAG,EAAlB;;EACA,SAAK,IAAII,OAAT,IAAoBvB,QAApB,EAA8B;EAC5B,UAAIwB,eAAe,GAAG,KAAKxB,QAAL,CAAcyB,MAAd,CAAsBvD,IAAD,IAAUA,IAAI,CAACP,KAAL,KAAe4D,OAAO,CAAC5D,KAAtD,EAA6D,CAA7D,CAAtB;EACAwD,MAAAA,WAAW,CAACpC,IAAZ,CAAiB5B,MAAM,CAACkE,MAAP,CAAc,EAAd,EAAkBG,eAAlB,EAAmCD,OAAnC,CAAjB;EACD;;EACD,SAAKvB,QAAL,GAAgBmB,WAAhB;EACD;EAED;EACF;EACA;EACA;;;EACEO,EAAAA,UAAU,CAACxC,MAAD,EAAS;EACjB,QAAInB,KAAK,CAACgD,OAAN,CAAc7B,MAAd,KAAyB,OAAOA,MAAP,KAAkB,QAA/C,EAAyD;EACvD,YAAM,IAAI8B,KAAJ,CAAW,yBAAX,CAAN;EACD;;EACD,QAAI,CAAC9B,MAAM,CAACyC,IAAR,IAAgB,CAACzC,MAAM,CAAC0C,KAA5B,EAAmC;EACjC,YAAM,IAAIZ,KAAJ,CAAU,oDAAV,CAAN;EACD;;EACD,SAAKf,OAAL,CAAalB,IAAb,CAAkBG,MAAlB;EACD;;EArKe;;ECCX,MAAM2C,aAAN,CAAoB;EACzB;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACElC,EAAAA,WAAW,CAAChD,OAAO,GAAG,EAAX,EAAe;EACxB,SAAKmF,KAAL,GAAa,EAAb;EACA,QAAIC,WAAW,GAAGrF,mBAAmB,CAACC,OAAD,CAArC;EACA,UAAM2B,UAAU,GAAGyD,WAAW,CAACzD,UAA/B;EACA,SAAKyD,WAAL,GAAmBzD,UAAnB;;EACA,SAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,UAAU,CAACf,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;EAC1C,YAAMK,KAAK,GAAGW,UAAU,CAAChB,CAAD,CAAV,CAAc0E,KAAd,CAAoB,GAApB,CAAd;EACA,WAAKF,KAAL,CAAW/C,IAAX,CACE,IAAIW,IAAJ,CAAS;EACPE,QAAAA,EAAE,EAAEtB,UAAU,CAAChB,CAAD,CADP;EAEPwC,QAAAA,KAAK,EAAEnC,KAAK,CAAC,CAAD,CAFL;EAGPA,QAAAA,KAAK,EAAEA,KAAK,CAAC,CAAD,CAHL;EAIPuC,QAAAA,UAAU,EAAE5C;EAJL,OAAT,CADF;EAQD;EACF;EAEH;EACA;EACA;EACA;;;EACE2E,EAAAA,kBAAkB,CAACnC,KAAD,EAAQ;EACxB,QAAIgC,KAAK,GAAG,EAAZ;;EACA,SAAK,IAAII,IAAT,IAAiBpC,KAAjB,EAAwB;EACtBgC,MAAAA,KAAK,CAAC/C,IAAN,CAAW,IAAIW,IAAJ,CAASwC,IAAT,CAAX;EACD;;EACD,SAAKJ,KAAL,GAAaA,KAAb;EACD;EAED;EACF;EACA;EACA;;;EACEK,EAAAA,oBAAoB,CAACnC,QAAD,EAAW;EAC7B,QAAI,CAACjC,KAAK,CAACgD,OAAN,CAAcf,QAAd,CAAD,IAA4B,KAAK8B,KAAL,CAAWvE,MAAX,KAAsByC,QAAQ,CAACzC,MAA/D,EAAuE;EACrE,YAAM,IAAIyD,KAAJ,CACH,6DADG,CAAN;EAGD;;EACD,SAAK,IAAI1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwE,KAAL,CAAWvE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;EAC1C,WAAKwE,KAAL,CAAWxE,CAAX,EAAc4D,WAAd,CAA0BlB,QAAQ,CAAC1C,CAAD,CAAlC;EACD;EACF;EAED;EACF;EACA;EACA;;;EACE8E,EAAAA,oBAAoB,CAACC,OAAD,EAAU;EAC5B,QAAI,CAACtE,KAAK,CAACgD,OAAN,CAAcsB,OAAd,CAAD,IAA2B,KAAKP,KAAL,CAAWvE,MAAX,KAAsB8E,OAAO,CAAC9E,MAA7D,EAAqE;EACnE,YAAM,IAAIyD,KAAJ,CACH,6DADG,CAAN;EAGD;;EACD,QACE,CAACjD,KAAK,CAACgD,OAAN,CAAcsB,OAAd,CAAD,IACA,CAACtE,KAAK,CAACgD,OAAN,CAAcsB,OAAO,CAAC,CAAD,CAAP,CAAW/B,CAAzB,CADD,IAEA,CAACvC,KAAK,CAACgD,OAAN,CAAcsB,OAAO,CAAC,CAAD,CAAP,CAAW9B,CAAzB,CAHH,EAIE;EACA,YAAM,IAAIS,KAAJ,CACH,qEADG,CAAN;EAGD;;EACD,SAAK,IAAI1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwE,KAAL,CAAWvE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;EAC1C,WAAKwE,KAAL,CAAWxE,CAAX,EAAc2D,WAAd,CAA0BoB,OAAO,CAAC/E,CAAD,CAAjC;EACD;EACF;EAED;EACF;EACA;EACA;;;EACEgF,EAAAA,wBAAwB,CAACC,YAAD,EAAe;EACrC,QACE,CAACxE,KAAK,CAACgD,OAAN,CAAcwB,YAAd,CAAD,IACA,KAAKT,KAAL,CAAWvE,MAAX,KAAsBgF,YAAY,CAAChF,MAFrC,EAGE;EACA,YAAM,IAAIyD,KAAJ,CACH,iEADG,CAAN;EAGD;;EAED,QACE,CAACjD,KAAK,CAACgD,OAAN,CAAcwB,YAAd,CAAD,IACA,CAACxE,KAAK,CAACgD,OAAN,CAAcwB,YAAY,CAAC,CAAD,CAAZ,CAAgBjC,CAA9B,CADD,IAEA,CAACvC,KAAK,CAACgD,OAAN,CAAcwB,YAAY,CAAC,CAAD,CAAZ,CAAgBhC,CAA9B,CAFD,IAGAgC,YAAY,CAAC,CAAD,CAAZ,CAAgBhC,CAAhB,CAAkBhD,MAAlB,KAA6BgF,YAAY,CAAC,CAAD,CAAZ,CAAgBjC,CAAhB,CAAkB/C,MAJjD,EAKE;EACA,YAAM,IAAIyD,KAAJ,CACH,qEADG,CAAN;EAGD;;EACD,SAAK,IAAI1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwE,KAAL,CAAWvE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;EAC1C,WAAKwE,KAAL,CAAWxE,CAAX,EAAcwD,cAAd,CAA6ByB,YAAY,CAACjF,CAAD,CAAzC;EACD;EACF;EAED;EACF;EACA;EACA;;;EACEkF,EAAAA,mBAAmB,CAACvC,OAAD,EAAU;EAC3B,QAAI,CAAClC,KAAK,CAACgD,OAAN,CAAcd,OAAd,CAAL,EAA6B;EAC3B,YAAM,IAAIe,KAAJ,CAAU,mCAAV,CAAN;EACD;;EACD,SAAK,IAAI1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwE,KAAL,CAAWvE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;EAC1C,WAAKwE,KAAL,CAAWxE,CAAX,EAAcoE,UAAd,CAAyBzB,OAAO,CAAC3C,CAAD,CAAhC;EACD;EACF;EAED;EACF;EACA;EACA;;;EACEmF,EAAAA,gBAAgB,GAAG;EACjB,WAAO,KAAKV,WAAL,CAAiB9D,GAAjB,CAAqB,CAACC,IAAD,EAAOC,KAAP,MAAkB;EAC5CA,MAAAA,KAAK,EAAEA,KADqC;EAE5CR,MAAAA,KAAK,EAAEO,IAFqC;EAG5CiC,MAAAA,QAAQ,EAAE,KAHkC;EAI5CD,MAAAA,UAAU,EAAE/B;EAJgC,KAAlB,CAArB,CAAP;EAMD;EAED;EACF;EACA;EACA;;;EACEuE,EAAAA,aAAa,GAAG;EACd,UAAMZ,KAAK,GAAG,KAAKA,KAAnB;EACA,QAAIa,WAAW,GAAG,EAAlB;EACA,QAAIC,YAAY,GAAG,EAAnB;;EACA,SAAK,IAAItF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwE,KAAK,CAACvE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;EACrC,UAAIuF,UAAU,GAAGC,IAAI,CAACC,SAAL,CACfjB,KAAK,CAACxE,CAAD,CAAL,CAAS0C,QAAT,CAAkB/B,GAAlB,CAAuBC,IAAD,IAAUA,IAAI,CAAC8E,aAArC,CADe,CAAjB;EAGA,UAAIC,OAAO,GAAGN,WAAW,CAACO,IAAZ,CAAkBlE,OAAD,IAAaA,OAAO,KAAK6D,UAA1C,CAAd;EACA,UAAII,OAAO,GAAG,CAAd,EAAiB;EACjBN,MAAAA,WAAW,CAAC5D,IAAZ,CAAiB8D,UAAjB;EACA,YAAMM,gBAAgB,GAAGrB,KAAK,CAC3BL,MADsB,CAEpBvD,IAAD,IACE4E,IAAI,CAACC,SAAL,CACE7E,IAAI,CAAC8B,QAAL,CAAc/B,GAAd,CAAmBe,OAAD,IAAaA,OAAO,CAACgE,aAAvC,CADF,MAEMH,UALa,EAOtB5E,GAPsB,CAOjBC,IAAD,IAAUA,IAAI,CAACP,KAPG,CAAzB;EAQAiF,MAAAA,YAAY,CAAC7D,IAAb,CAAkBoE,gBAAlB;EACD;;EACD,WAAOP,YAAP;EACD;EAEC;EACJ;EACA;EACA;;;EACEQ,EAAAA,QAAQ,CAACzG,OAAO,GAAG,EAAX,EAAe;EACrB,UAAM;EAAE0G,MAAAA;EAAF,QAAU1G,OAAhB;EACA,QAAImF,KAAK,GAAG,EAAZ;;EACA,SAAK,IAAII,IAAT,IAAiB,KAAKJ,KAAtB,EAA6B;EAC3B,UAAI,CAACuB,GAAD,IAAQA,GAAG,CAACC,QAAJ,CAAapB,IAAI,CAACtC,EAAlB,CAAZ,EAAmCkC,KAAK,CAAC/C,IAAN,CAAWmD,IAAX;EACpC;;EACD,WAAOJ,KAAP;EACD;EAEG;EACN;EACA;EACA;;;EACEyB,EAAAA,OAAO,CAAC5G,OAAO,GAAG,EAAX,EAAe;EACpB,UAAM;EAAEiD,MAAAA;EAAF,QAASjD,OAAf;;EACA,SAAK,IAAIuF,IAAT,IAAiB,KAAKJ,KAAtB,EAA6B;EAC3B,UAAIlC,EAAE,KAAKsC,IAAI,CAACtC,EAAhB,EAAoB;EAClB,eAAOsC,IAAP;EACD;EACF;EACF;;EA3LwB;;;;;;;;;;;"}