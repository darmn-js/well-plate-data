{"version":3,"file":"well-plate-data.js","sources":["../node_modules/is-any-array/src/index.js","../node_modules/ml-array-sum/lib-es6/index.js","../node_modules/ml-array-mean/lib-es6/index.js","../node_modules/ml-array-variance/lib-es6/index.js","../node_modules/ml-array-standard-deviation/lib-es6/index.js","../node_modules/univariate-tests/lib-esm/grubbs.js","../src/utilities/getRandomId.js","../src/plateSample.js","../src/utilities/addChartStyle.js","../src/utilities/averageAnalysis.js","../src/utilities/averageArrays.js","../src/utilities/checkReagents.js","../src/utilities/generatePlateLabels.js","../src/utilities/getSamplesIDs.js","../src/utilities/rawAnalysis.js","../src/utilities/setTypeOfPlate.js","../src/utilities/sortWells.js","../src/well/well.js","../src/wellPlateData.js"],"sourcesContent":["const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","import isArray from 'is-any-array';\n\nfunction sum(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += input[i];\n  }\n\n  return sumValue;\n}\n\nexport default sum;\n","import sum from 'ml-array-sum';\n\nfunction mean(input) {\n  return sum(input) / input.length;\n}\n\nexport default mean;\n","import isArray from 'is-any-array';\nimport arrayMean from 'ml-array-mean';\n\nfunction variance(values) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(values)) {\n    throw new TypeError('input must be an array');\n  }\n\n  var _options$unbiased = options.unbiased,\n      unbiased = _options$unbiased === void 0 ? true : _options$unbiased,\n      _options$mean = options.mean,\n      mean = _options$mean === void 0 ? arrayMean(values) : _options$mean;\n  var sqrError = 0;\n\n  for (var i = 0; i < values.length; i++) {\n    var x = values[i] - mean;\n    sqrError += x * x;\n  }\n\n  if (unbiased) {\n    return sqrError / (values.length - 1);\n  } else {\n    return sqrError / values.length;\n  }\n}\n\nexport { variance as default };\n","import variance from 'ml-array-variance';\n\nfunction standardDeviation(values) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Math.sqrt(variance(values, options));\n}\n\nexport { standardDeviation as default };\n","import mean from 'ml-array-mean';\nimport standardDeviation from 'ml-array-standard-deviation';\nimport raw from './data/grubbs.json';\nconst { table, confidence } = raw;\n/**\n * Grubbs\n * @returns the result of testing an array of values\n */\nexport function grubbs(values, options = {}) {\n    const { type = 'alphas', value = 0.05 } = options;\n    const meanValue = mean(values);\n    const std = standardDeviation(values);\n    const test = [];\n    if (values.length < 3) {\n        for (const value of values) {\n            test.push({\n                value,\n                score: 0,\n                pass: undefined,\n            });\n        }\n        return { criticalValue: undefined, test };\n    }\n    const criticalValue = table[values.length - 3][confidence[type].indexOf(value)];\n    for (const value of values) {\n        const score = Math.abs(value - meanValue) / std;\n        test.push({\n            value,\n            score,\n            pass: score > criticalValue ? false : true,\n        });\n    }\n    return { criticalValue, test };\n}\n//# sourceMappingURL=grubbs.js.map","export function getRandomId(options = {}) {\n  const { length = 25 } = options;\n  let result = [];\n  let characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result.push(\n      characters.charAt(Math.floor(Math.random() * charactersLength)),\n    );\n  }\n  return result.join('');\n}\n","import { getRandomId } from './utilities/getRandomId';\n\nexport class PlateSample {\n  /**\n   * @param {String} id - Identificator\n   * @param {String} label - Sample label\n   * @param {Array}  [wells=[]] - Wells that corresponds to the sample\n   * @param {Object} [metadata={}] - Metadata relate to the well\n   */\n  constructor(options = {}) {\n    let {\n      id = getRandomId(),\n      label = undefined,\n      wells = [],\n      metadata = {\n        color: 'blue',\n        display: true,\n        category: null,\n        group: null,\n      },\n      averagedSpectra = { x: [], y: [] },\n      averagedGrowthCurves = { x: [], y: [] },\n      _highlight = getRandomId(),\n      analysis = {\n        raw: {},\n        averaged: [],\n        wells: [],\n      },\n      results = {},\n      reagents = [],\n    } = options;\n    this.id = id;\n    this.label = label;\n    this.wells = wells;\n    this.metadata = metadata;\n    this.results = results;\n    this.analysis = analysis;\n    this.reagents = reagents;\n    this.averagedSpectra = averagedSpectra;\n    this.averagedGrowthCurves = averagedGrowthCurves;\n    this._highlight = _highlight;\n  }\n}\n\n","\nexport function addChartStyle(data, well) {\n    data.styles = {\n      unselected: {\n        lineColor: well.metadata.color || 'red',\n        lineWidth: 1,\n        lineStyle: 1,\n      },\n      selected: {\n        lineColor: well.metadata.color || 'red',\n        lineWidth: 3,\n        lineStyle: 1,\n      },\n    };\n    data.label = well.id;\n  }","export function averageAnalysis(wells){\n    const keys = Object.keys(wells[0].analysis.processed)\n    let result = [];\n    for (let key of keys) {\n        let average = 0;\n        for (let well of wells) {\n            average += well.analysis.processed[key];\n        }\n        result.push({\n            label: key,\n            value: average / wells.length,\n        })\n    }\n    return result;\n}","export function averageArrays(arrays) {\n  const data = [];\n  for (let array of arrays) {\n    if (array.x && array.y && array.y.length) data.push(array);\n  }\n  if (!data.length) return { x: [], y: [] };\n  let result = [];\n  let xAxis = data[0].x;\n  for (let i = 0; i < data[0].y.length; i++) {\n    let variable = 0;\n    for (let j = 0; j < data.length; j++) {\n      if (data[j].y.length) variable += data[j].y[i];\n    }\n    result.push(variable / data.length);\n  }\n  return {\n    x: xAxis,\n    y: result,\n  };\n}\n","export function checkReagents(well, options={}) {\n  const {\n    checkKeys = true,\n    checkValues = true,\n    keys = ['reference', 'batch', 'uuid', 'concentration']\n  } = options;\n  const reagents = well.reagents;\n  if (reagents.length === 0) throw new Error(`The well ${well.id} has no reagents`);\n  for (let reagent of reagents) {\n    const entries = Object.entries(reagent);\n    if (checkKeys) {\n      const inputKeys = entries.map((item) => item[0]);\n      for (let i = 0; i < keys.length; i++) {\n        const boolean = inputKeys.find((item) => item === keys[i]);\n        if (!boolean) {\n          throw new Error(\n            `Property ${keys[i].toUpperCase()} not defined for ${reagent.label} at ${well.id}`,\n          );\n        }\n      }\n    }\n\n    if (checkValues) {\n      const inputValues = entries.map((item) => item[1]);\n      for (let i = 0; i < keys.length; i++) {\n        const index = inputValues.findIndex(\n          (item) => item === null || item === undefined || item === '',\n        );\n        if (index !== -1) {\n          throw new Error(\n            `Property ${entries[index][0].toUpperCase()} has undefined value for ${reagent.label} at ${well.id}`,\n          );\n        }\n      }\n    }\n  }\n}\n","/**\n * Returns an array of labels as strings\n * @param {object} [options={}]\n * @param {string} [options.nbRows] - Indicates the number of rows that the well plate will contain (if the input is a letter the number of rows will increase alphabetically until it reaches the letter defined as input).\n * @param {string} [options.nbColumns] - Indicates the number of columns that the well plate will contain (if the input is a letter the number of rows will increase alphabetically until it reaches the letter defined as input).\n * @param {number} [options.nbPlates] - Indicates the number of plates to be generated.\n * @param {number} [options.initPlate] - It referes the plate where the experiment began.\n * @param {boolean} [options.accountPreviousWells] - For plates where the well label is a number, this option allows to take in count previous labels in the next plate.\n * @param {string} [options.direction] - For plates where the well label is a number, this option sets the direction in which this will increase.\n * @return {Object} {labelsList, axis }\n */\n\nexport function generatePlateLabels(options = {}) {\n  let {\n    nbRows = 'h',\n    nbColumns = '12',\n    nbPlates = 1,\n    initPlate = 0,\n    accountPreviousWells = false,\n    direction = 'horizontal',\n  } = options;\n\n  let entries = Object.entries({ rows: nbRows, columns: nbColumns });\n\n  for (let i = 0; i < entries.length; i++) {\n    if (Number.isNaN(parseInt(entries[i][1], 10))) {\n      let label = entries[i][1].toUpperCase().charCodeAt(0);\n      let axis = new Array(label - 64)\n        .fill()\n        .map((item, index) => String.fromCharCode(index + 65));\n      entries[i][1] = axis;\n    } else {\n      let axis = new Array(parseInt(entries[i][1], 10))\n        .fill()\n        .map((item, index) => index + 1);\n      entries[i][1] = axis;\n    }\n  }\n  let labelsList = [];\n  let [rows, columns] = [entries[0][1], entries[1][1]];\n  if (Number.isInteger(rows[0]) && Number.isInteger(columns[0])) {\n    let rod = direction === 'vertical' ? rows : columns;\n    for (let u = initPlate; u < initPlate + nbPlates; u++) {\n      for (let i = 0; i < rows.length; i++) {\n        let row = [];\n        for (let j = 0; j < columns.length; j++) {\n          let [rowIndex, columnIndex] =\n            direction === 'vertical' ? [i, j] : [j, i];\n          let factor = accountPreviousWells\n            ? u * rows.length * columns.length\n            : 0;\n          row[j] = `${u + 1}-${\n            factor + (columnIndex * rod.length + rod[rowIndex])\n          }`;\n        }\n        labelsList.push(...row);\n      }\n    }\n  } else {\n    for (let u = initPlate; u < initPlate + nbPlates; u++) {\n      for (let i = 0; i < rows.length; i++) {\n        let row = [];\n        for (let j = 0; j < columns.length; j++) {\n          let element =\n            typeof rows[i] === 'string'\n              ? rows[i] + columns[j]\n              : columns[j] + rows[i];\n          row[j] = `${u + 1}-${element}`;\n        }\n        labelsList.push(...row);\n      }\n    }\n  }\n  return {\n    labelsList: labelsList,\n    axis: entries,\n  };\n}\n","/**\n * Returns an array of objects containing IDs of the wells with the same reagents and the corresponding key reagents\n * @returns {Array}\n */\nexport function getSamplesIDs(wells) {\n  let sampleWells = [];\n  let sampleIDs = [];\n  for (let i = 0; i < wells.length; i++) {\n    let replicated = JSON.stringify(\n      wells[i].reagents.map((item) => item.concentration),\n    );\n    let feature = sampleWells.find((element) => element === replicated);\n    if (feature + 1) continue;\n    sampleWells.push(replicated);\n    const replicates = wells\n      .filter((item) => JSON.stringify(item.reagents.map((element) => element.concentration)) === replicated)\n      .map((item) => item.id);\n    sampleIDs.push(replicates);\n  }\n  return sampleIDs;\n}\n","export function rawAnalysis(wells){\n    const keys = Object.keys(wells[0].analysis.processed)\n    let result = {};\n    for (let key of keys) {\n        let average = 0;\n        for (let well of wells) {\n            average += well.analysis.processed[key];\n        }\n        result[key] = average / wells.length\n    }\n    return result;\n}\n","export function setTypeOfPlate(options = {}) {\n  const { nbRows = 'h', nbColumns = '12' } = options;\n  const rows = Number.isNaN(parseInt(nbRows, 10))\n    ? nbRows.toUpperCase()\n    : parseInt(nbRows, 10);\n  const columns = Number.isNaN(parseInt(nbColumns, 10))\n    ? nbColumns.toUpperCase()\n    : parseInt(nbColumns, 10);\n  return `${rows}x${columns}`;\n}\n","/**\n * Returns the array of wells sorted regarding its alphanumeric identifier.\n * @param {Array} - Array of wells\n * @returns {Array}\n */\nexport function sortWells(array, options={}) {\n    const { path = 'id' } = options;\n    return array.sort((a, b) => {\n        return a[path].localeCompare(b[path], 'en', { numeric: true });\n    })\n}","import { getRandomId } from '../utilities/getRandomId';\n\nexport class Well {\n  /**\n   * @param {String} id - Identificator\n   * @param {String} label - Well label\n   * @param {Number} plate - Number of the plate\n   * @param {Object} [data={}] - Spectrum and growth curves data\n   * @param {Object} [data.growthCurve={}]  - Growth curve obtaineed\n   * @param {Array}  [data.growthCurve.x=[]]\n   * @param {Array} [data.growthCurve.y=[]]\n   * @param {Object} [data.spectrum={}]\n   * @param {Array} [data.spectrum.x=[]] - Spectrum obtaineed\n   * @param {Array} [data.spectrum.y=[]]\n   * @param {Object} [options={}]\n   * @param {Object} [options.metadata={}] - Metadata relate to the well\n   * @param {Object} [options.analysis={}] - Metadata relate to the well\n   * @param {Array} [options.reagents=[]] - Rctants used in the well\n   */\n  constructor(options = {}) {\n    let {\n      id = getRandomId(),\n      label = undefined,\n      plate,\n      metadata = {\n        color: 'black',\n        display: true,\n        category: null,\n        group: null,\n      },\n      reagents = [],\n      analysis = {\n        raw: {},\n        processed: {}\n      },\n      growthCurve = {\n        data: { x: [], y: [] }\n      },\n      spectrum = {\n        data: { x: [], y: [] }\n      }\n    } = options;\n\n    this.id = id;\n    this.selected = false;\n    this.label = label;\n    this.plate = plate;\n    this.analysis = analysis;\n    this.metadata = metadata;\n    this.reagents = reagents;\n    this.growthCurve = growthCurve;\n    this.spectrum = spectrum;\n\n    if (!growthCurve.data.x && !growthCurve.data.y) {\n      this.growthCurve.data.x = [];\n      this.growthCurve.data.y = [];\n    }\n\n    if (!spectrum.data.x && !spectrum.data.y) {\n      this.spectrum.data.x = [];\n      this.spectrum.data.y = [];\n    }\n\n    this._highlight = id;\n  }\n\n  /**\n   * Returns the growth curve\n   * @returns {Array}\n   */\n  getGrowthCurve() {\n    return this.growthCurve;\n  }\n\n  /**\n   * Returns the spectrum\n   * @returns {Array}\n   */\n  getSpectrum() {\n    return this.spectrum;\n  }\n\n  /**\n   * Returns the metadata of the well\n   * @returns {Object}\n   */\n  getMetadata() {\n    return this.metadata;\n  }\n\n  /**\n   * Returns the reagents presents in the well\n   * @returns {Object}\n   */\n  getReagents() {\n    return this.reagents;\n  }\n\n  /**\n   * Returns the label of the well\n   * @returns {Object}\n   */\n  getLabel() {\n    return this.label;\n  }\n\n  /**\n   * Returns the id of the well\n   * @returns {Object}\n   */\n  getID() {\n    return this.id;\n  }\n\n  /**\n   * Set the growth curve obtained from the well\n   * @param {Object} input\n   * @param {Array} [input.x=[]]\n   * @param {Array} [input.y=[]]\n   */\n\n  addGrowthCurve(growthCurve) {\n    if (!Array.isArray(growthCurve.x) || !Array.isArray(growthCurve.y)) {\n      throw new Error(`X and Y must be arrays`);\n    }\n    this.growthCurve = {\n      data: growthCurve\n    };\n  }\n\n  /**\n   * Set the spectrum obtained from the well\n   * @param {Object} input\n   * @param {Array} [input.x=[]]\n   * @param {Array} [input.y=[]]\n   */\n  addSpectrum(spectrum) {\n    if (!Array.isArray(spectrum.x) || !Array.isArray(spectrum.y)) {\n      throw new Error(`X and Y must be arrays`);\n    }\n    this.spectrum = {\n      data: spectrum\n    };\n  }\n\n  /**\n   * Sets the reagents constituent of the well\n   * @param {Object} reagents - Array of reagents as objects\n   */\n  addReagents(reagents) {\n    if (!Array.isArray(reagents)) {\n      throw new Error(`Reagents must be a vector of objects`);\n    }\n    if (this.reagents.length === 0) {\n      this.reagents = reagents;\n    } else {\n      let newReagents = [];\n      for (let i = 0; i < reagents.length; i++) {\n        let previousReagents = this.reagents[i] ? this.reagents[i] : {};\n        newReagents.push(Object.assign({}, previousReagents, reagents[i]));\n      }\n      this.reagents = newReagents;\n    }\n  }\n\n  /**\n   * Sets the reagents constituent of the well\n   * @param {Object} reagents - Array of reagents as objects\n   */\n  updateReagents(reagents) {\n    if (!Array.isArray(reagents)) {\n      throw new Error(`Reagents must be a vector of objects`);\n    }\n    let newReagents = [];\n    for (let reagent of reagents) {\n      let previousReagent = this.reagents.filter((item) => item.label === reagent.label)[0];\n      newReagents.push(Object.assign({}, previousReagent, reagent));\n    }\n    this.reagents = newReagents;\n  }\n\n  /**\n   * Adds analysis to the well\n   * @param {Array} analysis - Object containing the analysis\n   */\n  addAnalysis(analysis) {\n    if (Array.isArray(analysis) || typeof analysis !== 'object') {\n      throw new Error(`Result must be a object`);\n    }\n    let { name, value } = analysis;\n    this.analysis.raw[name] = value;\n    this.analysis.processed[name] = value;\n  }\n}\n","/* eslint-disable prefer-named-capture-group */\n/* eslint-disable func-names */\nimport * as tests from 'univariate-tests';\n\nimport { PlateSample } from './plateSample';\nimport { addChartStyle } from './utilities/addChartStyle';\nimport { averageAnalysis} from './utilities/averageAnalysis';\nimport { averageArrays } from './utilities/averageArrays';\nimport { checkReagents } from './utilities/checkReagents';\nimport { generatePlateLabels } from './utilities/generatePlateLabels';\nimport { getRandomId } from './utilities/getRandomId';\nimport { getSamplesIDs } from './utilities/getSamplesIDs';\nimport { rawAnalysis } from './utilities/rawAnalysis';\nimport { setTypeOfPlate } from './utilities/setTypeOfPlate';\nimport { sortWells } from './utilities/sortWells';\nimport { Well } from './well/well';\n\nexport class WellPlateData {\n  /**\n   * Manager of the data regarding a well plates\n   * @param {Object} [options={}]\n   * @param {String} [options.nbRows] - Indicates the number of rows that the well plate will contain (if the input is a letter the number of rows will increase alphabetically until it reaches the letter defined as input).\n   * @param {String} [options.nbColumns] - Indicates the number of columns that the well plate will contain (if the input is a letter the number of rows will increase alphabetically until it reaches the letter defined as input).\n   * @param {Number} [options.nbPlates] - Indicates the number of plates to be generated.\n   * @param {Number} [options.initPlate] - It referes the plate where the experiment began.\n   * @param {Boolean} [options.accountPreviousWells] - For plates where the well label is a number, this option allows to take in count previous labels in the next plate.\n   * @param {String} [options.direction] - For plates where the well label is a number, this option sets the direction in which this will increase.\n   */\n  constructor(options = {}) {\n    this.wells = [];\n    this.samples = [];\n    this.typeOfPlate = setTypeOfPlate(options);\n    let plateLabels = generatePlateLabels(options);\n    const labelsList = plateLabels.labelsList;\n    for (let i = 0; i < labelsList.length; i++) {\n      const label = labelsList[i].split('-');\n      this.wells.push(\n        new Well({\n          id: labelsList[i],\n          plate: label[0],\n          label: label[1],\n          _highlight: i,\n        }),\n      );\n    }\n  }\n\n  /**\n   * Sets the reagents constituent to each well\n   * @param {Array} reagents - Array containing an array of reagents as objects\n   */\n  addReagentsFromArray(reagents) {\n    if (!Array.isArray(reagents) || this.wells.length !== reagents.length) {\n      throw new Error(\n        `Input array must have the same length as wells in the plate`,\n      );\n    }\n    for (let i = 0; i < this.wells.length; i++) {\n      this.wells[i].addReagents(reagents[i]);\n    }\n    this.updateSamples();\n  }\n\n  /**\n   * Sets the corresponding spectrum to each well\n   * @param {Array} spectra - Array of objects containing the x and y components of the spectrum\n   */\n  addSpectrumFromArray(spectra) {\n    if (!Array.isArray(spectra)) {\n      throw new Error(\n        `Input array must have the same length as wells in the plate`,\n      );\n    }\n    if (\n      !Array.isArray(spectra) ||\n      !Array.isArray(spectra[0].array.x) ||\n      !Array.isArray(spectra[0].array.y) ||\n      spectra[0].array.y.length !== spectra[0].array.x.length\n    ) {\n      throw new Error(`The input array must be an array`);\n    }\n    for (let well of this.wells) {\n      const spectrum = spectra.filter((item) => item.label === well.label)[0];\n      if (spectrum !== undefined) {\n        well.metadata.display = false;\n        well.metadata.color = 'black';\n        well.addSpectrum(spectrum.array);\n      } else {\n        well.metadata.display = false;\n        well.metadata.color = 'darkgrey';\n      }\n    }\n    this.updateSamples();\n  }\n\n  /**\n   * Sets the corresponding growth curve to each well\n   * @param {Array} growthCurves - Array of objects containing the x and y components of the growth curve\n   */\n  addGrowthCurvesFromArray(growthCurves) {\n    if (!Array.isArray(growthCurves)) {\n      throw new Error(`The input array must be an array`);\n    }\n\n    if (\n      !Array.isArray(growthCurves) ||\n      !Array.isArray(growthCurves[0].array.x) ||\n      !Array.isArray(growthCurves[0].array.y) ||\n      growthCurves[0].array.y.length !== growthCurves[0].array.x.length\n    ) {\n      throw new Error(\n        `The input array must be an array of objects with x and y components`,\n      );\n    }\n    for (let well of this.wells) {\n      const growthCurve = growthCurves.filter(\n        (item) => item.label === well.label,\n      )[0];\n      if (growthCurve !== undefined) {\n        well.metadata.display = false;\n        well.metadata.color = 'black';\n        well.addGrowthCurve(growthCurve.array);\n      } else {\n        well.metadata.display = false;\n        well.metadata.color = 'darkgrey';\n      }\n    }\n    this.updateSamples();\n  }\n\n  /**\n   * Sets the corresponding result to each well\n   * @param {Array} analysis - Array of objects containing the analysis added\n   */\n  addAnalysisFromArray(analysis) {\n    if (!Array.isArray(analysis)) {\n      throw new Error('The analysis input is not an array');\n    }\n    for (let i = 0; i < this.wells.length; i++) {\n      this.wells[i].addAnalysis(analysis[i]);\n    }\n  }\n\n  /**\n   * Returns an array of objects with the corresponding labels to each well\n   * @returns {Array}\n   */\n  getWells(options = {}) {\n    const { ids } = options;\n    let wells = [];\n    for (let well of this.wells) {\n      if (!ids || ids.includes(well.id)) wells.push(well);\n    }\n    return wells;\n  }\n\n  /**\n   * Returns an array of objects with the corresponding labels to each well\n   * @returns {Array}\n   */\n  getWell(options = {}) {\n    const { id } = options;\n    for (let well of this.wells) {\n      if (id === well.id) {\n        return well;\n      }\n    }\n  }\n\n  /**\n   * Returns a string with CSV format\n   * @returns {String}\n   */\n  getTemplate(options = {}) {\n    const { separator = ',' } = options;\n    const plate = this.wells;\n    const regex = /(?:[0-9]+)|(?:[a-zA-Z]+)/g;\n    const reagentsLabels = plate[0].reagents.map((item) => (item.label));\n    const reagentsUnits = plate[0].reagents.map((item) => (item.unit));\n    const reagents = [];\n    for (let i = 0; i < reagentsLabels.length; i++) {\n      reagents.push(`${reagentsLabels[i]}(${reagentsUnits[i]})`)\n    }\n\n    const header = ['row', 'column'].concat(reagents);\n    const list = [header];\n    for (let well of plate) {\n      const splittedLabel = Number.isNaN(parseInt(well.label, 10)) ?\n        well.label.match(regex): getWellsPositions(well.label);\n      const concentrations = well.reagents.map((item) => item.concentration);\n      list.push(splittedLabel.concat(concentrations));\n    }\n    return list.map((well) => well.join(separator)).join('\\n');\n  }\n\n  /**\n   * Checks out if the reagents contain the needed information\n   * @param {Object} [options={}]\n   * @param {Boolean} [options.checkKeys] - Parameter that allows to check the keys of the reagents object\n   * @param {Boolean} [options.checkValues] - Parameter that allows to check that the values are defined\n   * @param {Array} [options.keys] - Array of keys to check\n   */\n\n  checkReagents(options = {}) {\n    const wells = this.wells;\n    for (let well of wells) {\n      checkReagents(well, options);\n    }\n  }\n\n  /**\n   * Checks out if the reagents contain the needed information\n   * @param {Object} [options={}]\n   * @param {Boolean} [options.checkKeys] - Parameter that allows to check the keys of the reagents object\n   * @param {Boolean} [options.checkValues] - Parameter that allows to check that the values are defined\n   * @param {Array} [options.keys] - Array of keys to check\n   */\n\n  getSpectraChart(options = {}) {\n    const { ids } = options;\n    const wells = this.wells;\n    let chart = {\n      data: [],\n    };\n\n    for (let well of wells) {\n      if (!ids || ids.includes(well.id)) {\n        if (well.spectrum.data.x.length && well.spectrum.data.y.length) {\n          const data = well.spectrum.data;\n          addChartStyle(data, well);\n          chart.data.push(data);\n        }\n      }\n    }\n    return chart;\n  }\n\n  /**\n   * Checks out if the reagents contain the needed information\n   * @param {Object} [options={}]\n   * @param {Boolean} [options.checkKeys] - Parameter that allows to check the keys of the reagents object\n   * @param {Boolean} [options.checkValues] - Parameter that allows to check that the values are defined\n   * @param {Array} [options.keys] - Array of keys to check\n   */\n\n  getGrowthCurveChart(options = {}) {\n    const { ids } = options;\n    const wells = this.wells;\n    let chart = {\n      data: [],\n    };\n\n    for (let well of wells) {\n      if (!ids || ids.includes(well.id)) {\n        if (well.growthCurve.data.x.length && well.growthCurve.data.y.length) {\n          const data = well.growthCurve.data;\n          addChartStyle(data, well);\n          chart.data.push(data);\n        }\n      }\n    }\n    return chart;\n  }\n\n  getChartOfSpectraSamples(options) {\n    let chart = {\n      data: [],\n    };\n\n    let samples = this.getSamples(options);\n    for (let sample of samples) {\n      const data = sample.averagedSpectra;\n      addChartStyle(data, sample);\n      chart.data.push(data);\n    }\n    return chart;\n  }\n\n  getChartOfGrowthCurvesSamples(options) {\n    let chart = {\n      data: [],\n    };\n\n    let samples = this.getSamples(options);\n    for (let sample of samples) {\n      const data = sample.averagedGrowthCurves;\n      addChartStyle(data, sample);\n      chart.data.push(data);\n    }\n    return chart;\n  }\n\n  /**\n   * Returns an array of objects with the corresponding labels to each well\n   * @returns {Array}\n   */\n  getSamples(options = {}) {\n    const { ids } = options;\n    let samples = [];\n\n    for (let sample of this.samples) {\n      if (!ids || ids.includes(sample.id)) samples.push(sample);\n    }\n    return samples;\n  }\n  /**\n   * Returns an array of objects with the corresponding labels to each well\n   * @returns {Array}\n   */\n  getSample(options = {}) {\n    const { id } = options;\n\n    for (let sample of this.samples) {\n      if (id === sample.id) return sample;\n    }\n  }\n\n  /**\n   * Fills the plate with information coming from external array.\n   * @param {Array} plate - Array containing well data as objects.\n   */\n  static fillPlateFromArray(wells) {\n    wells = sortWells(wells);\n    const lastLabel = sortWells(wells, { path: 'label' })[wells.length - 1].label;\n    let [nbRows, nbColumns] = Number.isNaN(parseInt(lastLabel, 10)) ?\n      lastLabel.match(/[^\\d]+|\\d+/g): [10, 10];\n    const nbPlates = parseInt(wells[wells.length - 1].id.split('-')[0], 10);\n    const wellPlateData = new WellPlateData({ nbRows, nbColumns, nbPlates });\n    for (let well of wells) {\n      const wellIndex = wellPlateData.wells.findIndex((item) => item.id === well.id);\n      wellPlateData.wells[wellIndex] = new Well(well);\n    }\n    wellPlateData.typeOfPlate = `${nbRows}x${nbColumns}`;\n    wellPlateData.updateSamples();\n    return wellPlateData;\n  }\n\n  /**\n   * Create WellPlateData from CSV and TSV files\n   * @param {string} text\n   * @param {object} [options={}]\n   * @param {object} [options.separator=',']\n   */\n  static readTemplate(string, options = {}) {\n    const { separator = ',' } = options;\n    const list = string.split('\\n')\n      .map((row) => row.split(separator))\n      .filter((item) => item !== '');\n    const wells = [];\n    let wellPlateData;\n    if (\n        Number.isInteger(parseInt(list[1][0], 10)) &&\n        Number.isInteger(parseInt(list[1][1], 10))\n    ) {\n      wellPlateData = new WellPlateData({ nbRows: 10, nbColumns: 10 });\n      for (let i = 1; i < list.length; i++) {\n        const well = {\n          id: `1-${((parseInt(list[i][0], 10) - 1) * 10) + parseInt(list[i][1], 10)}`,\n          reagents: [],\n        };\n        for (let j = 2; j < list[0].length; j++) {\n          well.reagents.push({\n            label: list[0][j].split('(')[0],\n            unit: /\\(([^)]+)\\)/.exec(list[0][j])[1],\n            concentration: parseFloat(list[i][j]),\n          });\n        }\n        wells.push(well);\n      }\n    } else {\n      wellPlateData = new WellPlateData({ nbRows: 'H', nbColumns: 12 });\n      for (let i = 1; i < list.length; i++) {\n        const well = {\n          id: `1-${list[i][0].concat(list[i][1])}`,\n          reagents: [],\n        };\n        for (let j = 2; j < list[0].length; j++) {\n          well.reagents.push({\n            label: list[0][j].split('(')[0],\n            unit: /\\(([^)]+)\\)/.exec(list[0][j])[1],\n            concentration: parseFloat(list[i][j]),\n          });\n        }\n        wells.push(well);\n      }\n    }\n    for (let i = 0; i < wells.length; i++) {\n      const selectedWell = wellPlateData.getWell({ id: wells[i].id });\n      selectedWell.updateReagents(wells[i].reagents);\n    }\n    wellPlateData.updateSamples();\n    return wellPlateData;\n  }\n}\n\nWellPlateData.prototype.resurrect = function () {\n  // eslint-disable-next-line import/no-unresolved\n  const Datas = require('src/main/datas')\n  const DataObject = Datas.DataObject;\n  let keys = Object.keys(this.wells[0]);\n  for (let well of this.wells) {\n    for (let key of keys) {\n      well[key] = DataObject.resurrect(well[key]);\n    }\n  }\n  this.updateSamples();\n  keys = Object.keys(this.samples[0]);\n  for (let sample of this.samples){\n    for (let key of keys){\n      sample[key] = DataObject.resurrect(sample[key])\n    }\n  }\n};\n\nWellPlateData.prototype.updateSamples = function () {\n  if (!this.samples.length) {\n    const samplesIDs = getSamplesIDs(this.wells);\n    let samples = [];\n    for (let sampleIDs of samplesIDs) {\n      const label = sampleIDs.map((item) => item.split('-')[1]).join('-');\n      const wells = sampleIDs.map((item) => ({ id: item, inAverage: true }));\n      samples.push(\n        new PlateSample({\n          id: getRandomId(),\n          label: label,\n          wells: wells,\n          metadata: {\n            color: 'blue',\n            display: true,\n            category: null,\n            group: null,\n          },\n          results: {},\n          _highlight: sampleIDs,\n        }),\n      );\n    }\n    this.samples = samples;\n  } else {\n    const samples = this.samples;\n    for (let sample of samples) {\n      const ids = sample.wells.filter((item) => (item.inAverage)).map((item) => (item.id));\n      const wells = this.getWells({ ids });\n      const spectra = wells.map((item) => item.spectrum.data);\n      const growthCurves = wells.map((item) => item.growthCurve.data);\n      sample.analysis = {\n        raw: rawAnalysis(wells),\n        averaged: averageAnalysis(wells),\n        wells: wells.map((well) => ({ id: well.id, analysis: well.analysis }))\n      }\n      sample.averagedSpectra = averageArrays(spectra);\n      sample.averagedGrowthCurves = averageArrays(growthCurves);\n      sample.reagents = wells[0].reagents;\n      this.test(sample);\n    }\n  }\n};\n\nWellPlateData.prototype.test = function(sample){\n  const sampleWells = sample.wells;\n  const ids = sampleWells\n      .filter((item) => item.inAverage)\n      .map((item) => item.id);\n  const wells = this.getWells({ ids });\n  const keys = Object.keys(wells[0].analysis.processed);\n  if (!wells.length || !keys.length) return;\n  sampleWells.map((item) => (item.test = []))\n  for (const key of keys) {\n    const values = wells.map((item) => item.analysis.processed[key]);\n    const { test, criticalValue } = tests.grubbs(values);\n    sample.grubbsCriticalValue = criticalValue;\n    for (let i = 0; i < sampleWells.length; i++) {\n      if (ids.includes(sampleWells[i].id)) {\n        const index = ids.indexOf(sampleWells[i].id)\n        sampleWells[i].test.push({\n          label: key,\n          color: test[index].pass? '#46FF8F': '#FF4649',\n          ...test[index]\n        });\n      } else {\n        const well = this.getWell({ id: sampleWells[i].id })\n        sampleWells[i].test.push({\n          label: key,\n          color: '#EAEAEA',\n          value: well.analysis.processed[key],\n          score: 0,\n          pass: undefined\n        });\n      }\n    }\n  }\n}\n\nfunction getWellsPositions(label, options={}) {\n  const { columns = 10 } = options;\n  const nbRow = Math.floor((label - 1) / columns);\n  const nbColumn = label - (columns * nbRow);\n  return [nbRow + 1, nbColumn]\n}\n"],"names":["toString","Object","prototype","isAnyArray","object","call","endsWith","sum","input","isArray","TypeError","length","sumValue","i","mean","variance","values","options","arguments","undefined","_options$unbiased","unbiased","_options$mean","arrayMean","sqrError","x","standardDeviation","Math","sqrt","getRandomId","result","characters","charactersLength","push","charAt","floor","random","join","PlateSample","constructor","id","label","wells","metadata","color","display","category","group","averagedSpectra","y","averagedGrowthCurves","_highlight","analysis","raw","averaged","results","reagents","addChartStyle","data","well","styles","unselected","lineColor","lineWidth","lineStyle","selected","averageAnalysis","keys","processed","key","average","value","averageArrays","arrays","array","xAxis","variable","j","checkReagents","checkKeys","checkValues","Error","reagent","entries","inputKeys","map","item","boolean","find","toUpperCase","inputValues","index","findIndex","generatePlateLabels","nbRows","nbColumns","nbPlates","initPlate","accountPreviousWells","direction","rows","columns","Number","isNaN","parseInt","charCodeAt","axis","Array","fill","String","fromCharCode","labelsList","isInteger","rod","u","row","rowIndex","columnIndex","factor","element","getSamplesIDs","sampleWells","sampleIDs","replicated","JSON","stringify","concentration","feature","replicates","filter","rawAnalysis","setTypeOfPlate","sortWells","path","sort","a","b","localeCompare","numeric","Well","plate","growthCurve","spectrum","getGrowthCurve","getSpectrum","getMetadata","getReagents","getLabel","getID","addGrowthCurve","addSpectrum","addReagents","newReagents","previousReagents","assign","updateReagents","previousReagent","addAnalysis","name","WellPlateData","samples","typeOfPlate","plateLabels","split","addReagentsFromArray","updateSamples","addSpectrumFromArray","spectra","addGrowthCurvesFromArray","growthCurves","addAnalysisFromArray","getWells","ids","includes","getWell","getTemplate","separator","regex","reagentsLabels","reagentsUnits","unit","header","concat","list","splittedLabel","match","getWellsPositions","concentrations","getSpectraChart","chart","getGrowthCurveChart","getChartOfSpectraSamples","getSamples","sample","getChartOfGrowthCurvesSamples","getSample","fillPlateFromArray","lastLabel","wellPlateData","wellIndex","readTemplate","string","exec","parseFloat","selectedWell","resurrect","Datas","require","DataObject","samplesIDs","inAverage","test","criticalValue","tests","grubbsCriticalValue","indexOf","pass","score","nbRow","nbColumn"],"mappings":"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"}